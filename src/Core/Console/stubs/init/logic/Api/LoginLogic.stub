<?php

namespace App\Logic\Api;

use App\Exceptions\ApiException;

class LoginLogic
{

    /**
     * 发送登录短信验证码
     * @param array $data 要发送验证码的数据
     * @return bool
     * @throws ApiException
     */
    public static function sendSms($data)
    {
        //判断电话号码
        $user = \App\Model\UserModel::where('phone', '=', $data['phone'])
            ->where('is_on', '=', 1)
            ->first(['id']);

        if (!$user) {
            throw new ApiException('无效手机号码!');
        }

        $data = \App\Logic\SmsLogic::login($data['phone']);

        return $data;
    }

    /**
     * 发送登录邮箱验证码
     * @param array $data 要发送验证码的数据
     * @return bool
     * @throws ApiException
     */
    public static function sendEmail($data)
    {
        //判断邮箱
        $user = \App\Model\UserModel::where('email', '=', $data['email'])
            ->where('is_on', '=', 1)
            ->first(['id']);

        if (!$user) {
            throw new ApiException('无效邮箱!');
        }

        $data = \App\Logic\EmailLogic::login($data['email']);

        return $data;
    }

    /**
     * 用户登录
     * @param $data
     * @return bool
     * @throws ApiException
     */
    public static function login($data)
    {
        //是否存在此手机号码
        $user = \App\Model\UserModel::where('is_on', '=', 1);

        // 判断登录方式
        if (isset($data['phone']) && !isset($data['username'])) { // 手机号码登录
            $login_method = 'phone';
            $account = $data['phone'];
            $user->where('phone', '=', $data['phone']);
        } else if (isset($data['email'])) { // 邮箱登录
            $login_method = 'email';
            $account = $data['email'];
            $user->where('email', '=', $data['email']);
        } else {
            throw new ApiException('请正确输入登录账号!');
        }

        $user = $user->first(['id', 'headimg', 'username', 'headimg', 'status']);
        if (!$user) {
            throw new ApiException('密码错误或用户不存在!');
        }

        //密码登录
        if (isset($data['password'])) {
            //判断是否需要验证码
            $error_num = 0;
            $lock_info = \Cache::get('login:password:locked:' . md5($account));
            if ($lock_info) {
                $error_num = $lock_info['error_num'];
                //判断是否够3次
                if ($error_num >= 3 && empty($data['locked_verification_code'])) {
                    throw new ApiException('多次输入密码错误,请填写图形验证码!', 'NEED_LOCKED_VERIFICATION_CODE');
                } elseif ($error_num >= 3 && !empty($data['locked_verification_code'])) {
                    //验证密码图形验证码
                    $result = \Captcha::checkCodeInfo('account_check', $data['locked_verification_code']);
                    if (!$result) {
                        throw new ApiException('图形验证码错误!');
                    }
                }
            }

            //与密码比对
            $user_auth_pwd = \App\Model\UserAuthPasswordModel::where('user_id', '=', $user['id'])
                ->first(['id', 'password', 'salt']);
            if (!$user_auth_pwd) {
                \Cache::put('login:password:locked:' . md5($account), ['error_num' => $error_num + 1], 60);
                throw new ApiException('密码错误或用户不存在!');
            }

            //密码加密
            load_helper('Password');
            $pwd = encrypt_password($data['password'], $user_auth_pwd['salt']);
            if ($user_auth_pwd['password'] != $pwd) {
                \Cache::put('login:password:locked:' . md5($account), ['error_num' => $error_num + 1], 60);
                throw new ApiException('密码错误或用户不存在!');
            }

        } else if (isset($data['verification_code'])) {
            //验证码登录

            if ($login_method == 'phone') {
                \Sms::checkCaptcha('login_code', $data['phone'], $data['verification_code']);
            } elseif ($login_method == 'email') {
                \JiaLeo\Laravel\Captcha\Custom::checkCaptcha('email_check:login_code', $data['verification_code'], ['email' => $data['email']]);
            } else {
                throw new ApiException('登录方式错误!');
            }

        } else {
            throw new ApiException('登录方式错误!');
        }

        //预定义修改字段
        load_helper('Network');
        $save_data = [
            'last_login_ip' => get_client_ip(),
            'last_login_time' => time(),

        ];

        //判断是否oauth绑定账号
        $oauth_id = 0;
        if (isset($data['oauth']) && $data['oauth'] == 1) {
            $oauth_info = \Jwt::get('oauth');

            //查找数据库
            $is_oauth = \App\Model\UserAuthOauthModel::select(['id', 'user_id', 'nickname', 'headimg'])
                ->where('id', $oauth_info['user_auth_oauth_id'])
                ->first();
            if ($is_oauth) {
                if ($is_oauth->user_id == 0) {
                    $oauth_id = $oauth_info['user_auth_oauth_id'];

                    !empty($user->headimg) ? false : $save_data['headimg'] = $is_oauth->headimg;
                    !empty($user->username) ? false : $save_data['username'] = $is_oauth->nickname;

                    switch ($oauth_info['type']) {
                        case 1 :
                            $save_data['is_wechat'] = 1;
                            break;
                        case 2 :
                            $save_data['is_qq'] = 1;
                            break;
                        case 3 :
                            $save_data['is_weibo'] = 1;
                            break;
                    }
                }
            }
        }


        \DB::beginTransaction();

        $res = \App\Model\UserModel::where('id', $user['id'])
            ->where('is_on', 1)
            ->update($save_data);
        if (!$res) {
            \DB::rollBack();
            throw new ApiException('登录失败!');
        }

        //第三方授权
        if ($oauth_id > 0) {
            $is_update = \App\Model\UserAuthOauthModel::where('id', $oauth_id)
                ->update([
                    'user_id' => $user->id
                ]);
            if (!$is_update) {
                \DB::rollBack();
                throw new ApiException('数据库错误');
            }

            \Jwt::delete('oauth');
        }

        \DB::commit();

        \Cache::forget('login:password:locked:' . md5($account));

        \Jwt::setExpires(60 * 24 * 7);
        \Jwt::set('user_info', array(
            'user_id' => $user->id
        ));

        return true;
    }

    /**
     * 判断是否已经登录
     *
     * @return array
     */
    public static function judgeLogin()
    {
        $user_info = \Jwt::get('user_info');

        $data = [
            'is_user' => 0,
            'is_auth' => 0
        ];

        if (!empty($user_info['user_id'])) {
            $data['is_user'] = 1;
        }

        //是否经过微信授权
        $oauth_info = \Jwt::get('oauth');
        if ($oauth_info && !empty($oauth_info['user_auth_oauth_id']) && !empty($oauth_info['type'])
            && $oauth_info['type'] <= 3 && $oauth_info['type'] >= 1
        ) {
            $data['is_auth'] = 1;
        }

        return $data;
    }
}