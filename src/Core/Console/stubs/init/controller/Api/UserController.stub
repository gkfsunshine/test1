<?php
namespace App\Http\Controllers\Api;

use App\Exceptions\ApiException;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class UserController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {

        $list = \App\Logic\Api\UserLogic::getUserInfo();

        return $this->response($list);
    }

    /**
     * 修改用户资料
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request)
    {
        //
        $this->verify([
            'headimg' => 'no_required|egnum',
            'username' => 'no_required',
            'birthday' => 'no_required',
            'sex' => 'no_required|in:0:1:2',
            'nickname' => 'no_required',
            'province' => 'no_required',
            'city' => 'no_required',
            'area' => 'no_required'
        ], 'POST');
        $data = $this->verifyData;

        \App\Logic\Api\UserLogic::editUser($data);

        return $this->response();
    }

    /**
     * 绑定手机
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function addPhone(Request $request)
    {
        $this->verify([
            'phone' => 'mobile',
            'verification_code' => ''
        ], 'POST');
        \App\Logic\Api\UserLogic::addPhone($this->verifyData);

        return $this->response();
    }

    /**
     * 发送绑定手机验证码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendAddPhoneSms(Request $request)
    {
        $this->verify([
            'phone' => 'mobile',
        ], 'POST');
        \App\Logic\Api\UserLogic::sendAddPhoneSms($this->verifyData);

        return $this->responseList();
    }

    /**
     * 发送修改手机验证码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendEditPhoneSms(Request $request)
    {

        $data = \App\Logic\Api\UserLogic::sendEditPhoneSms();

        return $this->response($data);
    }

    /**
     * 发送修改手机新手机验证码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendNewPhoneSms(Request $request)
    {
        $this->verify([
            'phone' => 'mobile',
        ], 'POST');
        \App\Logic\Api\UserLogic::sendNewPhoneSms($this->verifyData);

        return $this->response();
    }

    /**
     * 修改手机
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function editPhoneVerifySms(Request $request)
    {
        $this->verify([
            'verification_code' => '',
        ], 'POST');
        $data = \App\Logic\Api\UserLogic::editPhoneVerifySms($this->verifyData);

        return $this->response($data);
    }

    /**
     * 修改手机
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function editPhone(Request $request)
    {
        $this->verify([
            'phone' => 'mobile',
            'edit_phone_token' => 'egnum',
            'verification_code' => '',
        ], 'POST');
        \App\Logic\Api\UserLogic::editPhone($this->verifyData);

        return $this->response();
    }

    /**
     * 绑定邮箱
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function addEmail(Request $request)
    {
        $this->verify([
            'email' => 'email',
            'verification_code' => ''
        ], 'POST');
        \App\Logic\Api\UserLogic::addEmail($this->verifyData);

        return $this->responseList();
    }

    /**
     * 发送绑定邮箱验证码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendAddEmailMsg(Request $request)
    {
        $this->verify([
            'email' => 'email',
        ], 'POST');
        \App\Logic\Api\UserLogic::sendAddEmailMsg($this->verifyData);

        return $this->responseList();
    }

    /**
     * 发送修改邮箱验证码(发送旧邮箱)
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendEditEmailMsg(Request $request)
    {
        $data = \App\Logic\Api\UserLogic::sendEditEmailMsg();

        return $this->response($data);
    }

    /**
     * 发送修改邮箱验证码(发送新邮箱)
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendEditNewEmailMsg(Request $request)
    {
        $this->verify([
            'email' => 'email',
        ], 'POST');
        $data = \App\Logic\Api\UserLogic::sendEditNewEmailMsg($this->verifyData);

        return $this->response($data);
    }

    /**
     * 修改邮箱
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function editEmail(Request $request)
    {
        $this->verify([
            'email' => 'email',
            'old_verification_code' => '',
            'new_verification_code' => '',
        ], 'POST');
        \App\Logic\Api\UserLogic::editEmail($this->verifyData);

        return $this->response();
    }

    /**
     * 发送修改密码验证码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendEditPasswordSms(Request $request)
    {
        \App\Logic\Api\UserLogic::sendEditPasswordSms();

        return $this->response();
    }

    /**
     * 发送修改密码验证码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendEditPasswordEmail(Request $request)
    {
        \App\Logic\Api\UserLogic::sendEditPasswordEmail();

        return $this->response();
    }

    /**
     * 修改登录密码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function editPassword(Request $request)
    {
        $this->verify([
            'type' => 'in:phone:email',
            'old_password' => '',
            'new_password' => '',
            'verification_code' => 'egnum',
        ], 'POST');
        \App\Logic\Api\UserLogic::editPassword($this->verifyData);

        return $this->response();
    }

    /**
     * 修改交易密码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function editPayPassword(Request $request)
    {
        $this->verify([
            'type' => 'in:phone:email',
            'pay_password' => '',
            'verification_code' => '',
        ], 'POST');
        \App\Logic\Api\UserLogic::editPayPassword($this->verifyData);

        return $this->response();
    }

    /**
     * 发送修改交易密码验证码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendEditPayPasswordSms(Request $request)
    {
        \App\Logic\Api\UserLogic::sendEditPayPasswordSms();

        return $this->response();
    }

    /**
     * 发送修改邮箱验证码(发送旧邮箱)
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function sendEditPayPasswordEmail(Request $request)
    {
        $data = \App\Logic\Api\UserLogic::sendEditPayPasswordEmail();

        return $this->response($data);
    }

    /**
     * 找回密码
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function forgetPassword(Request $request)
    {
        $this->verify([
            'step' => 'in:1:2'
        ], 'POST');

        //判断验证
        if ($this->verifyData['step'] == 1) {
            $this->verify([
                'phone' => 'mobile|no_required',
                'email' => 'email|no_required',
                'verification_code' => '',
            ], 'POST');

            $data = \App\Logic\Api\UserLogic::forgetPasswordByFirstStep($this->verifyData);
        } else {
            $this->verify([
                'phone' => 'mobile|no_required',
                'email' => 'email|no_required',
                'password' => '',
                'edit_password_token' => '',
            ], 'POST');

            $data = \App\Logic\Api\UserLogic::forgetPasswordBySecondStep($this->verifyData);
        }

        return $this->response($data);
    }

    /**
     * 找回密码手机验证码
     *
     * @return \Illuminate\Http\Response
     */
    public function sendForgetPasswordSms()
    {
        $this->verify([
            'phone' => 'mobile',
            //'captcha_code' => ''
        ], 'POST');
        \App\Logic\Api\UserLogic::sendForgetPasswordSms($this->verifyData);

        return $this->response();
    }

    /**
     * 找回密码邮箱验证码
     *
     * @return \Illuminate\Http\Response
     */
    public function sendForgetPasswordEmail()
    {
        $this->verify([
            'email' => 'email',
            //'captcha_code' => ''
        ], 'POST');
        \App\Logic\Api\UserLogic::sendForgetPasswordEmail($this->verifyData);

        return $this->response();
    }

    /**
     * 找回密码图片验证码
     *
     * @return \Illuminate\Http\Response
     */
    public function forgetPasswordCaptcha()
    {
        \Captcha::setLimit(4)->create('forget_password_code', 5);
    }

    /**
     * 检查是否拥有支付密码
     *
     * @return \Illuminate\Http\Response
     */
    public function judgeExistPayPassword()
    {
        $data = \App\Logic\Api\UserLogic::judgeExistPayPassword();

        return $this->response($data);
    }

    /**
     * app授权到网页
     * @return \Illuminate\Http\JsonResponse
     * @throws ApiException
     */
    public function appToWebToken()
    {
        if (\Jwt::get('device') != 'app') {
            throw new ApiException('系统错误!');
        }

        $user_id = \Jwt::get('user_info.user_id', 0);

        $token = \Jwt::createToken(array(
            'user_info' => array(
                'user_id' => $user_id
            )
        ), 'web');

        return $this->response($token);
    }

    /**
     * 解绑第三方授权
     * @return \Illuminate\Http\JsonResponse
     * @throws ApiException
     */
    public function unbindAuth()
    {
        $this->verify([
            'type' => 'in:wechat:qq:weibo',
        ], 'POST');

        \App\Logic\Api\UserLogic::unbindAuth($this->verifyData);
        return $this->response();
    }
}
